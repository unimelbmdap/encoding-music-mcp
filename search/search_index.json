{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"encoding-music-mcp","text":"<p>Welcome to the documentation for encoding-music-mcp, a Model Context Protocol (MCP) server for analyzing MEI (Music Encoding Initiative) files.</p>"},{"location":"#overview","title":"Overview","text":"<p>This MCP server provides a comprehensive suite of tools for analyzing encoded musical scores in MEI format. It enables AI assistants and other MCP clients to extract metadata, analyze musical structure, and understand encoded compositions.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#built-in-mei-collection","title":"\ud83c\udfbc Built-in MEI Collection","text":"<ul> <li>46 curated MEI files from three major collections:<ul> <li>15 Bach Two-Part Inventions (BWV 772-786)</li> <li>19 Bart\u00f3k Mikrokosmos pieces</li> <li>12 Morley Canzonets (1595)</li> </ul> </li> </ul>"},{"location":"#analysis-tools","title":"\ud83d\udcca Analysis Tools","text":"<ul> <li>Metadata Extraction: Title, composer, editors, publication details, and copyright information</li> <li>Key Analysis: Detect musical keys with confidence scores using music21</li> <li>Interval Analysis: Extract notes, melodic intervals, harmonic intervals, and melodic n-grams using CRIM Intervals</li> <li>File Discovery: Browse and explore the built-in MEI collection</li> </ul>"},{"location":"#efficient-design","title":"\u26a1 Efficient Design","text":"<ul> <li>Direct disk access - no token waste</li> <li>Fast dataframe-based interval analysis</li> <li>Comprehensive test suite</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Tools Overview</li> <li>API Reference</li> </ul>"},{"location":"#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol (MCP) is an open standard that enables AI assistants to securely access data and tools. This server implements MCP to provide music analysis capabilities to any MCP-compatible client, such as Claude Desktop.</p>"},{"location":"#what-is-mei","title":"What is MEI?","text":"<p>The Music Encoding Initiative (MEI) is a community-driven effort to define a system for encoding musical documents in a machine-readable structure. MEI brings together specialists from various music research communities to provide a comprehensive format for representing musical notation.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Music Analysis: Analyze harmonic progressions, melodic patterns, and key relationships</li> <li>Comparative Studies: Compare compositions across different composers and periods</li> <li>Pattern Discovery: Find recurring melodic or harmonic patterns using n-gram analysis</li> <li>Educational Tools: Explore musical structure and theory with AI assistance</li> <li>Research Workflows: Integrate music analysis into computational musicology research</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to begin? Head over to the Installation Guide to set up encoding-music-mcp.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub: unimelbmdap/encoding-music-mcp</li> <li>Issues: Report bugs or request features</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete reference for all encoding-music-mcp tools.</p>"},{"location":"api-reference/#tool-catalog","title":"Tool Catalog","text":"Tool Parameters Returns Documentation <code>list_available_mei_files</code> None <code>dict</code> with file lists Docs <code>get_mei_metadata</code> <code>filename: str</code> <code>dict</code> with metadata Docs <code>analyze_key</code> <code>filename: str</code> <code>dict</code> with key info Docs <code>get_notes</code> <code>filename: str</code> <code>dict</code> with notes Docs <code>get_melodic_intervals</code> <code>filename: str</code> <code>dict</code> with intervals Docs <code>get_harmonic_intervals</code> <code>filename: str</code> <code>dict</code> with intervals Docs <code>get_melodic_ngrams</code> <code>filename: str, n: int = 4</code> <code>dict</code> with n-grams Docs"},{"location":"api-reference/#discovery-tools","title":"Discovery Tools","text":""},{"location":"api-reference/#list_available_mei_files","title":"list_available_mei_files()","text":"<p>Discover all built-in MEI files.</p> <p>Parameters: None</p> <p>Returns: <pre><code>{\n    \"bach_inventions\": List[str],      # 15 files\n    \"bartok_mikrokosmos\": List[str],   # 19 files\n    \"morley_canzonets\": List[str],     # 12 files\n    \"all_files\": List[str]             # 46 files\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#metadata-tools","title":"Metadata Tools","text":""},{"location":"api-reference/#get_mei_metadatafilename","title":"get_mei_metadata(filename)","text":"<p>Extract metadata from MEI file header.</p> <p>Parameters: - <code>filename</code> (str): MEI filename (e.g., \"Bach_BWV_0772.mei\")</p> <p>Returns: <pre><code>{\n    \"title\": str,\n    \"composer\": str,\n    \"mei_editors\": List[str],\n    \"xml_editors\": List[str],\n    \"analysts\": List[str],\n    \"publication_date\": str | None,\n    \"copyright\": str | None,\n    \"application\": str | None\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#analysis-tools","title":"Analysis Tools","text":""},{"location":"api-reference/#analyze_keyfilename","title":"analyze_key(filename)","text":"<p>Detect musical key using music21.</p> <p>Parameters: - <code>filename</code> (str): MEI filename</p> <p>Returns: <pre><code>{\n    \"Key Name\": str,              # e.g., \"C major\", \"a minor\"\n    \"Confidence Factor\": float    # 0.0 to 1.0\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#get_notesfilename","title":"get_notes(filename)","text":"<p>Extract all notes with pitch and octave.</p> <p>Parameters: - <code>filename</code> (str): MEI filename</p> <p>Returns: <pre><code>{\n    \"filename\": str,\n    \"notes\": str    # CSV representation\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#get_melodic_intervalsfilename","title":"get_melodic_intervals(filename)","text":"<p>Calculate melodic intervals within voices.</p> <p>Parameters: - <code>filename</code> (str): MEI filename</p> <p>Returns: <pre><code>{\n    \"filename\": str,\n    \"melodic_intervals\": str    # CSV representation\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#get_harmonic_intervalsfilename","title":"get_harmonic_intervals(filename)","text":"<p>Calculate harmonic intervals between voices.</p> <p>Parameters: - <code>filename</code> (str): MEI filename</p> <p>Returns: <pre><code>{\n    \"filename\": str,\n    \"harmonic_intervals\": str    # CSV representation\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#get_melodic_ngramsfilename-n4","title":"get_melodic_ngrams(filename, n=4)","text":"<p>Find recurring melodic patterns.</p> <p>Parameters: - <code>filename</code> (str): MEI filename - <code>n</code> (int, optional): N-gram length (default: 4)</p> <p>Returns: <pre><code>{\n    \"filename\": str,\n    \"n\": int,\n    \"melodic_ngrams\": str    # CSV representation\n}\n</code></pre></p> <p>Full Documentation \u2192</p>"},{"location":"api-reference/#common-patterns","title":"Common Patterns","text":""},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>All tools raise <code>FileNotFoundError</code> for invalid filenames:</p> <pre><code>try:\n    result = analyze_key(\"nonexistent.mei\")\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\n</code></pre>"},{"location":"api-reference/#file-discovery-pattern","title":"File Discovery Pattern","text":"<pre><code># Get all files\nfiles = list_available_mei_files()\n\n# Analyze each file\nfor filename in files[\"all_files\"]:\n    metadata = get_mei_metadata(filename)\n    key_info = analyze_key(filename)\n    print(f\"{filename}: {metadata['title']} in {key_info['Key Name']}\")\n</code></pre>"},{"location":"api-reference/#interval-analysis-pattern","title":"Interval Analysis Pattern","text":"<pre><code># Extract notes\nnotes = get_notes(\"Bach_BWV_0772.mei\")\n\n# Get melodic intervals\nmelodic = get_melodic_intervals(\"Bach_BWV_0772.mei\")\n\n# Get harmonic intervals\nharmonic = get_harmonic_intervals(\"Bach_BWV_0772.mei\")\n\n# Find patterns\npatterns = get_melodic_ngrams(\"Bach_BWV_0772.mei\", n=4)\n</code></pre>"},{"location":"api-reference/#data-formats","title":"Data Formats","text":""},{"location":"api-reference/#csv-format","title":"CSV Format","text":"<p>Interval tools return data in CSV format for efficient token usage:</p> <pre><code>Measure,Beat,1,2\n1.0,1.0,Rest,Rest\n1.0,1.25,C4,\n1.0,1.5,D4,\n</code></pre> <ul> <li>Rows: Measure and beat positions (indexed)</li> <li>Columns: Voice part numbers</li> <li>Values: Notes, intervals, or patterns</li> <li>Empty cells: Represented as blank (no NaN in CSV)</li> </ul>"},{"location":"api-reference/#interval-notation","title":"Interval Notation","text":"<ul> <li>Quality: M (major), m (minor), P (perfect), A (augmented), d (diminished)</li> <li>Number: Scale degree (2, 3, 4, 5, 6, 7, 8+)</li> <li>Direction: Positive (ascending), negative (descending)</li> </ul> <p>Examples: <code>M2</code>, <code>-m3</code>, <code>P5</code>, <code>M13</code></p>"},{"location":"api-reference/#type-hints","title":"Type Hints","text":"<p>All tools use Python type hints:</p> <pre><code>from typing import Any\n\ndef analyze_key(filename: str) -&gt; dict[str, Any]: ...\ndef get_melodic_ngrams(filename: str, n: int = 4) -&gt; dict[str, Any]: ...\n</code></pre>"},{"location":"api-reference/#related-documentation","title":"Related Documentation","text":"<ul> <li>Tools Overview</li> <li>Quick Start Guide</li> <li>Development Guide</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to encoding-music-mcp!</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR-USERNAME/encoding-music-mcp.git\ncd encoding-music-mcp\n</code></pre></li> <li>Install dependencies:    <pre><code>uv sync\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a branch for your changes:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the Project Structure</p> </li> <li> <p>Format your code:    <pre><code>uv run ruff format .\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>uv run pytest\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"Add feature: description\"\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We use Ruff for code formatting and linting:</p> <pre><code># Format code\nuv run ruff format .\n\n# Check for issues\nuv run ruff check .\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>All changes must include tests. See Testing for details.</p> <pre><code># Run all tests\nuv run pytest\n\n# Run specific test file\nuv run pytest tests/test_intervals.py\n\n# Run with coverage\nuv run pytest --cov=src/encoding_music_mcp\n</code></pre>"},{"location":"development/contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a Pull Request on GitHub</p> </li> <li> <p>Wait for review - maintainers will review your PR</p> </li> </ol>"},{"location":"development/contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"development/contributing/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Report bugs via GitHub Issues</li> <li>Include reproduction steps</li> <li>Fix the bug and add a test case</li> </ul>"},{"location":"development/contributing/#new-tools","title":"New Tools","text":"<p>When adding new analysis tools:</p> <ol> <li>Create the tool in <code>src/encoding_music_mcp/tools/</code></li> <li>Register it in <code>tools/registry.py</code></li> <li>Add comprehensive tests in <code>tests/</code></li> <li>Document the tool in <code>docs/tools/</code></li> </ol>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ul> <li>Fix typos and improve clarity</li> <li>Add examples and use cases</li> <li>Update outdated information</li> </ul>"},{"location":"development/contributing/#mei-files","title":"MEI Files","text":"<p>To add new MEI files:</p> <ol> <li>Ensure files follow MEI standards</li> <li>Include complete metadata headers</li> <li>Update discovery tool if needed</li> <li>Add documentation</li> </ol>"},{"location":"development/contributing/#development-environment","title":"Development Environment","text":""},{"location":"development/contributing/#required-tools","title":"Required Tools","text":"<ul> <li>Python 3.11 or higher</li> <li>uv package manager</li> <li>Git for version control</li> </ul>"},{"location":"development/contributing/#ide-setup","title":"IDE Setup","text":"<p>We recommend:</p> <ul> <li>VS Code with Python extension</li> <li>PyCharm</li> <li>Any editor with Python support</li> </ul>"},{"location":"development/contributing/#running-the-server-locally","title":"Running the Server Locally","text":"<pre><code>uv run encoding-music-mcp\n</code></pre>"},{"location":"development/contributing/#questions","title":"Questions?","text":"<ul> <li>Open an issue</li> <li>Check existing issues and PRs</li> <li>Read the development docs</li> </ul>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Be respectful and constructive. This is an academic project aimed at supporting music research and education.</p>"},{"location":"development/structure/","title":"Project Structure","text":"<p>Understanding the organization of encoding-music-mcp.</p>"},{"location":"development/structure/#directory-layout","title":"Directory Layout","text":"<pre><code>encoding-music-mcp/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 encoding_music_mcp/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 server.py           # MCP server entry point\n\u2502       \u251c\u2500\u2500 tools/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 registry.py     # Tool registration\n\u2502       \u2502   \u251c\u2500\u2500 helpers.py      # Shared utilities\n\u2502       \u2502   \u251c\u2500\u2500 discovery.py    # File discovery\n\u2502       \u2502   \u251c\u2500\u2500 metadata.py     # Metadata extraction\n\u2502       \u2502   \u251c\u2500\u2500 key_analysis.py # Key detection\n\u2502       \u2502   \u2514\u2500\u2500 intervals.py    # Interval analysis\n\u2502       \u2514\u2500\u2500 resources/          # MEI files (46 files)\n\u2502           \u251c\u2500\u2500 Bach_BWV_*.mei\n\u2502           \u251c\u2500\u2500 Bartok_Mikrokosmos_*.mei\n\u2502           \u2514\u2500\u2500 Morley_*.mei\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_discovery.py\n\u2502   \u251c\u2500\u2500 test_metadata.py\n\u2502   \u251c\u2500\u2500 test_key_analysis.py\n\u2502   \u251c\u2500\u2500 test_intervals.py\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 docs/                       # Documentation (you are here)\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 resources/\n\u2502   \u2514\u2500\u2500 development/\n\u251c\u2500\u2500 pyproject.toml             # Project configuration\n\u251c\u2500\u2500 mkdocs.yml                 # Documentation configuration\n\u251c\u2500\u2500 README.md                  # Project readme\n\u2514\u2500\u2500 main.py                    # Legacy entry point\n</code></pre>"},{"location":"development/structure/#key-files","title":"Key Files","text":""},{"location":"development/structure/#srcencoding_music_mcpserverpy","title":"<code>src/encoding_music_mcp/server.py</code>","text":"<p>MCP server setup:</p> <pre><code>from mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"encoding-music-mcp\")\n\n# Tools are imported from registry\nfrom .tools import registry\n\ndef main():\n    mcp.run()\n</code></pre>"},{"location":"development/structure/#srcencoding_music_mcptoolsregistrypy","title":"<code>src/encoding_music_mcp/tools/registry.py</code>","text":"<p>Central tool registration:</p> <pre><code>from ..server import mcp\nfrom .metadata import get_mei_metadata\n# ... other imports\n\n# Register tools\nmcp.tool()(get_mei_metadata)\nmcp.tool()(analyze_key)\n# ... other registrations\n</code></pre>"},{"location":"development/structure/#srcencoding_music_mcptoolshelperspy","title":"<code>src/encoding_music_mcp/tools/helpers.py</code>","text":"<p>Shared utility functions:</p> <pre><code>def get_mei_filepath(filename: str) -&gt; Path:\n    \"\"\"Convert filename to full path.\"\"\"\n    resources_dir = Path(__file__).parent.parent / \"resources\"\n    return resources_dir / filename\n</code></pre>"},{"location":"development/structure/#adding-a-new-tool","title":"Adding a New Tool","text":"<ol> <li>Create the tool in <code>src/encoding_music_mcp/tools/your_tool.py</code>:</li> </ol> <pre><code>\"\"\"Your tool description.\"\"\"\n\nfrom typing import Any\nfrom .helpers import get_mei_filepath\n\ndef your_tool(filename: str) -&gt; dict[str, Any]:\n    \"\"\"Tool function with docstring.\"\"\"\n    filepath = get_mei_filepath(filename)\n    # Implementation\n    return {\"filename\": filename, \"result\": ...}\n</code></pre> <ol> <li>Register the tool in <code>tools/registry.py</code>:</li> </ol> <pre><code>from .your_tool import your_tool\n\nmcp.tool()(your_tool)\n</code></pre> <ol> <li> <p>Add tests in <code>tests/test_your_tool.py</code></p> </li> <li> <p>Document in <code>docs/tools/your-tool.md</code></p> </li> </ol>"},{"location":"development/structure/#module-organization","title":"Module Organization","text":""},{"location":"development/structure/#tools-module-srcencoding_music_mcptools","title":"Tools Module (<code>src/encoding_music_mcp/tools/</code>)","text":"<ul> <li>registry.py: Central registration point</li> <li>helpers.py: Shared utilities</li> <li>discovery.py: File browsing</li> <li>metadata.py: MEI header parsing</li> <li>key_analysis.py: Music21-based key detection</li> <li>intervals.py: CRIM Intervals analysis</li> </ul>"},{"location":"development/structure/#tests-module-tests","title":"Tests Module (<code>tests/</code>)","text":"<p>One test file per tool module, organized by functionality.</p>"},{"location":"development/structure/#configuration-files","title":"Configuration Files","text":""},{"location":"development/structure/#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>Project metadata and dependencies:</p> <pre><code>[project]\nname = \"encoding-music-mcp\"\nversion = \"0.1.0\"\ndependencies = [\n    \"mcp&gt;=1.0.0\",\n    \"crim-intervals&gt;=2.0.61\",\n]\n\n[dependency-groups]\ndev = [\n    \"pytest&gt;=8.0.0\",\n    \"ruff&gt;=0.8.0\",\n    \"mkdocs-material&gt;=9.6.22\",\n]\n</code></pre>"},{"location":"development/structure/#mkdocsyml","title":"<code>mkdocs.yml</code>","text":"<p>Documentation site configuration using Material theme.</p>"},{"location":"development/structure/#dependencies","title":"Dependencies","text":""},{"location":"development/structure/#runtime","title":"Runtime","text":"<ul> <li>mcp: Model Context Protocol implementation</li> <li>crim-intervals: Interval analysis (includes music21)</li> </ul>"},{"location":"development/structure/#development","title":"Development","text":"<ul> <li>pytest: Testing framework</li> <li>ruff: Code formatter and linter</li> <li>mkdocs-material: Documentation generator</li> </ul>"},{"location":"development/structure/#build-system","title":"Build System","text":"<p>Uses <code>uv_build</code> backend with src-layout:</p> <ul> <li>Package installed as <code>encoding-music-mcp</code></li> <li>Entry point: <code>encoding_music_mcp.server:main</code></li> <li>Editable installs supported</li> </ul>"},{"location":"development/structure/#related-documentation","title":"Related Documentation","text":"<ul> <li>Contributing Guide</li> <li>Testing Guide</li> </ul>"},{"location":"development/testing/","title":"Testing","text":"<p>encoding-music-mcp includes a comprehensive test suite to ensure reliability.</p>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#all-tests","title":"All Tests","text":"<pre><code>uv run pytest\n</code></pre>"},{"location":"development/testing/#verbose-output","title":"Verbose Output","text":"<pre><code>uv run pytest -v\n</code></pre>"},{"location":"development/testing/#specific-test-file","title":"Specific Test File","text":"<pre><code>uv run pytest tests/test_intervals.py\n</code></pre>"},{"location":"development/testing/#specific-test-function","title":"Specific Test Function","text":"<pre><code>uv run pytest tests/test_intervals.py::test_get_notes_bach\n</code></pre>"},{"location":"development/testing/#with-coverage","title":"With Coverage","text":"<pre><code>uv run pytest --cov=src/encoding_music_mcp --cov-report=term-missing\n</code></pre>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized in the <code>tests/</code> directory:</p> <pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 test_discovery.py       # Discovery tool tests\n\u251c\u2500\u2500 test_metadata.py         # Metadata extraction tests\n\u251c\u2500\u2500 test_key_analysis.py     # Key analysis tests\n\u251c\u2500\u2500 test_intervals.py        # Interval analysis tests\n\u2514\u2500\u2500 README.md                # Testing documentation\n</code></pre>"},{"location":"development/testing/#test-files","title":"Test Files","text":""},{"location":"development/testing/#test_discoverypy-4-tests","title":"test_discovery.py (4 tests)","text":"<ul> <li>File discovery functionality</li> <li>Collection organization</li> <li>Naming conventions</li> </ul>"},{"location":"development/testing/#test_metadatapy-5-tests","title":"test_metadata.py (5 tests)","text":"<ul> <li>Metadata extraction</li> <li>Multiple composers</li> <li>Error handling</li> </ul>"},{"location":"development/testing/#test_key_analysispy-6-tests","title":"test_key_analysis.py (6 tests)","text":"<ul> <li>Key detection</li> <li>Confidence factors</li> <li>Multiple pieces</li> </ul>"},{"location":"development/testing/#test_intervalspy-13-tests","title":"test_intervals.py (13 tests)","text":"<ul> <li>Notes extraction</li> <li>Melodic intervals</li> <li>Harmonic intervals</li> <li>N-gram patterns</li> </ul>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#test-structure_1","title":"Test Structure","text":"<pre><code>\"\"\"Tests for new tool.\"\"\"\n\nimport pytest\nfrom src.encoding_music_mcp.tools.new_tool import new_function\n\n\ndef test_new_function_bach():\n    \"\"\"Test new function with Bach piece.\"\"\"\n    result = new_function(\"Bach_BWV_0772.mei\")\n\n    assert isinstance(result, dict), \"Result should be a dictionary\"\n    assert \"expected_key\" in result, \"Should contain expected key\"\n\n\ndef test_new_function_invalid_file():\n    \"\"\"Test error handling for invalid files.\"\"\"\n    with pytest.raises(FileNotFoundError):\n        new_function(\"nonexistent_file.mei\")\n</code></pre>"},{"location":"development/testing/#test-resources","title":"Test Resources","text":"<p>Tests use built-in MEI files:</p> <ul> <li><code>Bach_BWV_0772.mei</code> - Primary test file</li> <li><code>Bartok_Mikrokosmos_022.mei</code> - Bart\u00f3k test file</li> <li><code>Morley_1595_01_Go_ye_my_canzonettes.mei</code> - Morley test file</li> </ul>"},{"location":"development/testing/#assertions","title":"Assertions","text":"<p>Test for:</p> <ul> <li>Return types: <code>isinstance(result, dict)</code></li> <li>Expected keys: <code>\"key_name\" in result</code></li> <li>Data formats: String, lists, numbers</li> <li>Error handling: <code>pytest.raises(Exception)</code></li> <li>Data content: Value ranges, formats</li> </ul>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Tests run automatically on:</p> <ul> <li>Every commit</li> <li>Pull requests</li> <li>Before releases</li> </ul>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>Current coverage: ~100% for all tools</p> <p>View coverage report:</p> <pre><code>uv run pytest --cov=src/encoding_music_mcp --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"development/testing/#adding-tests-for-new-tools","title":"Adding Tests for New Tools","text":"<p>When adding a new tool:</p> <ol> <li>Create tests in <code>tests/test_your_tool.py</code></li> <li>Test with multiple files (Bach, Bart\u00f3k, Morley)</li> <li>Test error conditions</li> <li>Verify return structure</li> <li>Check data formats</li> </ol> <p>Example:</p> <pre><code>def test_your_tool_bach():\n    \"\"\"Test with Bach piece.\"\"\"\n    result = your_tool(\"Bach_BWV_0772.mei\")\n    assert isinstance(result, dict)\n\ndef test_your_tool_bartok():\n    \"\"\"Test with Bart\u00f3k piece.\"\"\"\n    result = your_tool(\"Bartok_Mikrokosmos_022.mei\")\n    assert isinstance(result, dict)\n\ndef test_your_tool_invalid():\n    \"\"\"Test error handling.\"\"\"\n    with pytest.raises(FileNotFoundError):\n        your_tool(\"nonexistent.mei\")\n</code></pre>"},{"location":"development/testing/#related-documentation","title":"Related Documentation","text":"<ul> <li>Contributing Guide</li> <li>Project Structure</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>This guide explains how to configure encoding-music-mcp with various MCP clients.</p>"},{"location":"getting-started/configuration/#claude-desktop","title":"Claude Desktop","text":"<p>Claude Desktop is the most common MCP client for using encoding-music-mcp.</p>"},{"location":"getting-started/configuration/#locating-the-configuration-file","title":"Locating the Configuration File","text":"<p>The configuration file location depends on your operating system:</p> macOSWindowsLinux <pre><code>~/Library/Application Support/Claude/claude_desktop_config.json\n</code></pre> <pre><code>%APPDATA%\\Claude\\claude_desktop_config.json\n</code></pre> <pre><code>~/.config/Claude/claude_desktop_config.json\n</code></pre>"},{"location":"getting-started/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>Choose the configuration method that matches your installation method:</p> Method A: Using uvx (Recommended)Method B: Using Local Clone <p>For users who installed via uvx (no local clone):</p> <pre><code>{\n  \"mcpServers\": {\n    \"encoding-music-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/unimelbmdap/encoding-music-mcp.git\",\n        \"encoding-music-mcp\"\n      ]\n    }\n  }\n}\n</code></pre> <p>For users who cloned the repository locally:</p> <pre><code>{\n  \"mcpServers\": {\n    \"encoding-music-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/absolute/path/to/encoding-music-mcp\",\n        \"run\",\n        \"encoding-music-mcp\"\n      ]\n    }\n  }\n}\n</code></pre> <p>Use Absolute Paths</p> <p>Replace <code>/absolute/path/to/encoding-music-mcp</code> with the actual absolute path to your cloned repository.</p> <ul> <li>\u2705 Good: <code>/Users/alice/projects/encoding-music-mcp</code></li> <li>\u274c Bad: <code>~/projects/encoding-music-mcp</code></li> <li>\u274c Bad: <code>./encoding-music-mcp</code></li> </ul>"},{"location":"getting-started/configuration/#applying-configuration","title":"Applying Configuration","text":"<p>After editing the configuration file:</p> <ol> <li>Save the file</li> <li>Restart Claude Desktop completely</li> <li>Verify connection by looking for the MCP server indicator in Claude Desktop</li> </ol> <p>Troubleshooting</p> <p>If the server doesn't appear:</p> <ul> <li>Verify the JSON syntax is valid (no trailing commas, proper brackets)</li> <li>Check that the path is absolute and correct</li> <li>Ensure uv is installed and in your PATH</li> <li>Check Claude Desktop logs for error messages</li> </ul>"},{"location":"getting-started/configuration/#other-mcp-clients","title":"Other MCP Clients","text":"<p>encoding-music-mcp should work with any MCP-compatible client. The general configuration pattern is:</p> <pre><code>{\n  \"command\": \"uvx\",\n  \"args\": [\n    \"--from\",\n    \"git+https://github.com/unimelbmdap/encoding-music-mcp.git\",\n    \"encoding-music-mcp\"\n  ]\n}\n</code></pre> <p>Consult your MCP client's documentation for specific configuration instructions.</p>"},{"location":"getting-started/configuration/#standalone-mode","title":"Standalone Mode","text":"<p>You can also run the server directly without an MCP client (useful for testing):</p> <pre><code>uv run encoding-music-mcp\n</code></pre> <p>This starts the server and listens for MCP connections via stdio.</p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Quick Start guide to test your configuration</li> <li>Explore the Tools documentation to see what's available</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install and set up encoding-music-mcp on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have uv installed on your system. uv is a fast Python package installer and resolver.</p>"},{"location":"getting-started/installation/#installing-uv","title":"Installing uv","text":"macOS/LinuxWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>For alternative installation methods, see the official uv documentation.</p>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"<p>There are two ways to install encoding-music-mcp:</p>"},{"location":"getting-started/installation/#option-1-quick-start-using-uvx","title":"Option 1: Quick Start (Using uvx)","text":"<p>The fastest way to get started - no cloning required! This method runs the server directly from the GitHub repository.</p> <p>Recommended for most users</p> <p>This method is ideal if you just want to use the server without modifying the code.</p> <p>Simply add the following configuration to your MCP client (see Configuration for details):</p> <pre><code>{\n  \"mcpServers\": {\n    \"encoding-music-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/unimelbmdap/encoding-music-mcp.git\",\n        \"encoding-music-mcp\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/installation/#option-2-local-development","title":"Option 2: Local Development","text":"<p>For development or if you want to modify the code:</p> <ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/unimelbmdap/encoding-music-mcp.git\ncd encoding-music-mcp\n</code></pre> </li> <li> <p>Install dependencies:</p> <pre><code>uv sync\n</code></pre> </li> <li> <p>Verify installation:</p> <pre><code>uv run encoding-music-mcp\n</code></pre> </li> </ol> <p>Development Dependencies</p> <p>The <code>uv sync</code> command installs both runtime and development dependencies, including:</p> <ul> <li><code>pytest</code> for running tests</li> <li><code>ruff</code> for code formatting</li> <li><code>mkdocs-material</code> for documentation</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configure your MCP client to use the server</li> <li>Try the Quick Start guide to test the tools</li> <li>Explore the Tools documentation to learn what's available</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get up and running with encoding-music-mcp in minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ol> <li>\u2705 Installed uv</li> <li>\u2705 Configured your MCP client</li> </ol>"},{"location":"getting-started/quick-start/#your-first-queries","title":"Your First Queries","text":"<p>Once configured, you can start asking your AI assistant about MEI files. Here are some example queries to try:</p>"},{"location":"getting-started/quick-start/#discovering-available-files","title":"Discovering Available Files","text":"<p>Try asking:</p> <p>\"What MEI files are available?\"</p> <p>This uses the <code>list_available_mei_files</code> tool and returns all 46 built-in files organized by composer.</p> <p>Expected response: <pre><code>- 15 Bach Two-Part Inventions (BWV 772-786)\n- 19 Bart\u00f3k Mikrokosmos pieces\n- 12 Morley Canzonets from 1595\n</code></pre></p>"},{"location":"getting-started/quick-start/#extracting-metadata","title":"Extracting Metadata","text":"<p>Try asking:</p> <p>\"Tell me about Bach_BWV_0772.mei\"</p> <p>This uses the <code>get_mei_metadata</code> tool to extract detailed information about the file.</p> <p>Sample output: <pre><code>{\n  \"title\": \"Invention No. 1 in C major\",\n  \"composer\": \"Bach, Johann Sebastian\",\n  \"mei_editors\": [\"Freedman, Richard\"],\n  \"xml_editors\": [\"Sch\u00f6lkopf, Tobias\"],\n  \"analysts\": [\"Student, This\"],\n  \"publication_date\": \"2024-11-19\"\n}\n</code></pre></p>"},{"location":"getting-started/quick-start/#analyzing-keys","title":"Analyzing Keys","text":"<p>Try asking:</p> <p>\"What key is Bach_BWV_0772.mei in?\"</p> <p>This uses the <code>analyze_key</code> tool to detect the musical key.</p> <p>Sample output: <pre><code>{\n  \"Key Name\": \"C major\",\n  \"Confidence Factor\": 0.9451\n}\n</code></pre></p>"},{"location":"getting-started/quick-start/#getting-melodic-intervals","title":"Getting Melodic Intervals","text":"<p>Try asking:</p> <p>\"Get the melodic intervals for Bach_BWV_0772.mei\"</p> <p>This uses the <code>get_melodic_intervals</code> tool to extract interval analysis.</p> <p>Sample output: <pre><code>Measure Beat      1     2\n1.0     1.000  Rest  Rest\n        1.500    M2   NaN\n        1.750    M2   NaN\n        2.000    m2   NaN\n        ...\n</code></pre></p>"},{"location":"getting-started/quick-start/#finding-melodic-patterns","title":"Finding Melodic Patterns","text":"<p>Try asking:</p> <p>\"Find melodic 4-grams in Bach_BWV_0772.mei\"</p> <p>This uses the <code>get_melodic_ngrams</code> tool to identify recurring melodic patterns.</p> <p>Sample output: <pre><code>Measure Beat              1            2\n1.0     1.500      2_2_2_-3          NaN\n        1.750      2_2_-3_2          NaN\n        2.000     2_-3_2_-3          NaN\n        ...\n</code></pre></p>"},{"location":"getting-started/quick-start/#understanding-the-results","title":"Understanding the Results","text":""},{"location":"getting-started/quick-start/#notes-and-intervals","title":"Notes and Intervals","text":"<ul> <li>Notes: Represented as pitch + octave (e.g., <code>C4</code>, <code>D5</code>)</li> <li>Intervals: Standard music theory notation<ul> <li><code>M2</code> = Major 2nd</li> <li><code>m2</code> = Minor 2nd</li> <li><code>P5</code> = Perfect 5th</li> <li>Negative values indicate descending intervals (e.g., <code>-M3</code>)</li> </ul> </li> </ul>"},{"location":"getting-started/quick-start/#dataframe-format","title":"Dataframe Format","text":"<p>Most tools return data in a tabular format:</p> <ul> <li>Rows: Measure and beat positions (as floats)</li> <li>Columns: Voice parts or voice pairs</li> <li>Values: Notes, intervals, or n-grams</li> </ul>"},{"location":"getting-started/quick-start/#confidence-factors","title":"Confidence Factors","text":"<p>Key analysis returns a confidence factor between 0.0 and 1.0:</p> <ul> <li>&gt; 0.8: Very confident (clear tonal center)</li> <li>0.5 - 0.8: Moderate confidence</li> <li>&lt; 0.5: Low confidence (possibly modal or atonal)</li> </ul>"},{"location":"getting-started/quick-start/#more-complex-queries","title":"More Complex Queries","text":"<p>Try combining tools or asking analytical questions:</p> <p>Advanced queries:</p> <ul> <li>\"Compare the keys of all Bach inventions\"</li> <li>\"Find common melodic patterns across Bart\u00f3k pieces\"</li> <li>\"What's the harmonic interval structure of Morley_1595_01?\"</li> <li>\"Analyze the melodic contour of Bach_BWV_0773.mei\"</li> </ul>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Tools documentation for detailed tool reference</li> <li>Browse the MEI Resources to learn about available files</li> <li>Check the API Reference for programmatic usage</li> </ul>"},{"location":"resources/bach/","title":"Bach Two-Part Inventions","text":"<p>Johann Sebastian Bach's Two-Part Inventions (BWV 772-786).</p>"},{"location":"resources/bach/#overview","title":"Overview","text":"<p>The Two-Part Inventions are a collection of 15 keyboard pieces composed by J.S. Bach around 1720-1723. Originally titled \"Inventions and Sinfonias,\" these works were pedagogical pieces designed to teach contrapuntal technique and keyboard performance.</p>"},{"location":"resources/bach/#collection-details","title":"Collection Details","text":"<ul> <li>Composer: Johann Sebastian Bach (1685-1750)</li> <li>Period: Baroque</li> <li>Year: c. 1723</li> <li>Format: Two-voice keyboard works</li> <li>Files: 15 MEI files (BWV 772-786)</li> </ul>"},{"location":"resources/bach/#file-list","title":"File List","text":"BWV Key Filename 772 C major <code>Bach_BWV_0772.mei</code> 773 D minor <code>Bach_BWV_0773.mei</code> 774 D major <code>Bach_BWV_0774.mei</code> 775 E\u266d major <code>Bach_BWV_0775.mei</code> 776 E minor <code>Bach_BWV_0776.mei</code> 777 E major <code>Bach_BWV_0777.mei</code> 778 F major <code>Bach_BWV_0778.mei</code> 779 F minor <code>Bach_BWV_0779.mei</code> 780 G major <code>Bach_BWV_0780.mei</code> 781 G minor <code>Bach_BWV_0781.mei</code> 782 A major <code>Bach_BWV_0782.mei</code> 783 A minor <code>Bach_BWV_0783.mei</code> 784 B\u266d major <code>Bach_BWV_0784.mei</code> 785 B minor <code>Bach_BWV_0785.mei</code> 786 B major <code>Bach_BWV_0786.mei</code>"},{"location":"resources/bach/#musical-characteristics","title":"Musical Characteristics","text":""},{"location":"resources/bach/#texture","title":"Texture","text":"<ul> <li>Two independent voices (upper and lower)</li> <li>Contrapuntal writing with frequent imitation</li> <li>Equal importance given to both voices</li> </ul>"},{"location":"resources/bach/#pedagogical-purpose","title":"Pedagogical Purpose","text":"<ul> <li>Teach independent finger technique</li> <li>Develop contrapuntal hearing</li> <li>Introduce invertible counterpoint</li> <li>Train both hands equally</li> </ul>"},{"location":"resources/bach/#style","title":"Style","text":"<ul> <li>Clear tonal structure</li> <li>Motivic development</li> <li>Sequential patterns</li> <li>Imitative entries</li> </ul>"},{"location":"resources/bach/#analysis-opportunities","title":"Analysis Opportunities","text":"<p>These files are ideal for studying:</p> <ul> <li>Two-voice counterpoint: Clear voice leading</li> <li>Motivic development: Recurring themes</li> <li>Key relationships: Covers multiple keys</li> <li>Imitation: Voices imitating each other</li> <li>Invertible counterpoint: Voices exchanging material</li> </ul>"},{"location":"resources/bach/#example-analyses","title":"Example Analyses","text":""},{"location":"resources/bach/#key-analysis","title":"Key Analysis","text":"<pre><code>Bach_BWV_0772.mei: C major (confidence: 0.945)\nBach_BWV_0773.mei: D minor (confidence: 0.892)\n</code></pre>"},{"location":"resources/bach/#melodic-patterns","title":"Melodic Patterns","text":"<p>Find recurring motifs using n-gram analysis: <pre><code>get_melodic_ngrams(\"Bach_BWV_0772.mei\", n=4)\n</code></pre></p>"},{"location":"resources/bach/#voice-leading","title":"Voice Leading","text":"<p>Study how the two voices interact: <pre><code>get_harmonic_intervals(\"Bach_BWV_0772.mei\")\n</code></pre></p>"},{"location":"resources/bach/#metadata-example","title":"Metadata Example","text":"<pre><code>{\n  \"title\": \"Invention No. 1 in C major\",\n  \"composer\": \"Bach, Johann Sebastian\",\n  \"mei_editors\": [\"Freedman, Richard\"],\n  \"xml_editors\": [\"Sch\u00f6lkopf, Tobias\"]\n}\n</code></pre>"},{"location":"resources/bach/#educational-value","title":"Educational Value","text":"<p>Perfect for: - Learning two-part counterpoint - Studying Baroque keyboard style - Comparing contrapuntal techniques - Analyzing motivic development - Understanding imitative writing</p>"},{"location":"resources/bach/#related-resources","title":"Related Resources","text":"<ul> <li>MEI Files Overview</li> <li>Key Analysis Tool</li> <li>Interval Analysis Tools</li> </ul>"},{"location":"resources/bartok/","title":"Bart\u00f3k Mikrokosmos","text":"<p>Selected pieces from B\u00e9la Bart\u00f3k's Mikrokosmos collection.</p>"},{"location":"resources/bartok/#overview","title":"Overview","text":"<p>Mikrokosmos is a collection of 153 progressive piano pieces composed by B\u00e9la Bart\u00f3k between 1926 and 1939. The collection spans six volumes, progressing from elementary to advanced level, exploring 20th-century compositional techniques.</p>"},{"location":"resources/bartok/#collection-details","title":"Collection Details","text":"<ul> <li>Composer: B\u00e9la Bart\u00f3k (1881-1945)</li> <li>Period: 20th century</li> <li>Years: 1926-1939</li> <li>Format: Solo piano works</li> <li>Files: 19 selected pieces</li> </ul>"},{"location":"resources/bartok/#musical-characteristics","title":"Musical Characteristics","text":""},{"location":"resources/bartok/#style","title":"Style","text":"<ul> <li>Modal melodies</li> <li>Non-functional harmony</li> <li>Bitonality and polytonality</li> <li>Folk music influences</li> <li>Ostinato patterns</li> <li>Irregular meters</li> </ul>"},{"location":"resources/bartok/#pedagogical-approach","title":"Pedagogical Approach","text":"<ul> <li>Progressive difficulty</li> <li>Introduction to modern techniques</li> <li>Exploration of new sonorities</li> <li>Development of contemporary keyboard technique</li> </ul>"},{"location":"resources/bartok/#analysis-opportunities","title":"Analysis Opportunities","text":"<p>These files are ideal for studying:</p> <ul> <li>20th-century harmony: Non-traditional chord structures</li> <li>Modal writing: Scales beyond major/minor</li> <li>Rhythm: Irregular meters and folk rhythms</li> <li>Bitonality: Multiple simultaneous key centers</li> <li>Contemporary techniques: Modern compositional methods</li> </ul>"},{"location":"resources/bartok/#key-analysis-considerations","title":"Key Analysis Considerations","text":"<p>Bart\u00f3k pieces may show:</p> <ul> <li>Lower confidence scores: Due to modal and atonal elements</li> <li>Ambiguous keys: Pieces may be modal rather than tonal</li> <li>Multiple interpretations: Key analysis may vary</li> </ul> <p>Example: <pre><code>result = analyze_key(\"Bartok_Mikrokosmos_022.mei\")\n# May show lower confidence due to modal writing\n</code></pre></p>"},{"location":"resources/bartok/#comparative-study","title":"Comparative Study","text":"<p>Compare with Bach Inventions to study:</p> <ul> <li>Tonal vs. modal writing</li> <li>Traditional vs. contemporary harmony</li> <li>Baroque vs. 20th-century style</li> <li>Clear tonality vs. ambiguous key centers</li> </ul>"},{"location":"resources/bartok/#educational-value","title":"Educational Value","text":"<p>Perfect for: - Studying 20th-century music - Comparing tonal and modal writing - Analyzing folk music influences - Understanding contemporary techniques - Exploring harmonic innovation</p>"},{"location":"resources/bartok/#related-resources","title":"Related Resources","text":"<ul> <li>MEI Files Overview</li> <li>Bach Inventions - For comparison</li> <li>Key Analysis Tool</li> <li>Interval Analysis Tools</li> </ul>"},{"location":"resources/mei-files/","title":"MEI Files","text":"<p>encoding-music-mcp includes 46 carefully curated MEI files from three major collections.</p>"},{"location":"resources/mei-files/#overview","title":"Overview","text":"<p>All files are stored in the <code>resources</code> directory and are immediately accessible through the MCP server. No additional downloads or configuration required.</p>"},{"location":"resources/mei-files/#collections","title":"Collections","text":""},{"location":"resources/mei-files/#bach-two-part-inventions-15-files","title":"Bach Two-Part Inventions (15 files)","text":"<p>J.S. Bach's Two-Part Inventions (BWV 772-786) - pedagogical keyboard works demonstrating contrapuntal technique.</p> <p>View Bach collection details \u2192</p>"},{"location":"resources/mei-files/#bartok-mikrokosmos-19-files","title":"Bart\u00f3k Mikrokosmos (19 files)","text":"<p>Selected pieces from B\u00e9la Bart\u00f3k's Mikrokosmos - progressive piano pieces exploring 20th-century musical techniques.</p> <p>View Bart\u00f3k collection details \u2192</p>"},{"location":"resources/mei-files/#morley-canzonets-12-files","title":"Morley Canzonets (12 files)","text":"<p>Thomas Morley's Canzonets from 1595 - Renaissance vocal music demonstrating English madrigal style.</p> <p>View Morley collection details \u2192</p>"},{"location":"resources/mei-files/#file-format","title":"File Format","text":"<p>All files follow the MEI (Music Encoding Initiative) standard:</p> <ul> <li>Format: XML-based music notation encoding</li> <li>Extension: <code>.mei</code></li> <li>Encoding: UTF-8</li> <li>Standard: MEI 4.0 or compatible</li> </ul>"},{"location":"resources/mei-files/#quality-and-provenance","title":"Quality and Provenance","text":"<p>All files include detailed metadata:</p> <ul> <li>Composer information</li> <li>Title and work information</li> <li>MEI editors who created the encoding</li> <li>Publication dates</li> <li>Copyright/licensing information</li> </ul> <p>Use the <code>get_mei_metadata</code> tool to view this information for any file.</p>"},{"location":"resources/mei-files/#discovering-files","title":"Discovering Files","text":"<p>Use the <code>list_available_mei_files</code> tool to browse all available files:</p> <pre><code>{\n  \"bach_inventions\": [15 files],\n  \"bartok_mikrokosmos\": [19 files],\n  \"morley_canzonets\": [12 files],\n  \"all_files\": [46 files total]\n}\n</code></pre>"},{"location":"resources/mei-files/#using-files","title":"Using Files","text":"<p>All tools accept filenames as parameters:</p> <pre><code># Example: Analyze a Bach invention\nanalyze_key(\"Bach_BWV_0772.mei\")\n\n# Example: Get melodic intervals from Bart\u00f3k\nget_melodic_intervals(\"Bartok_Mikrokosmos_022.mei\")\n\n# Example: Extract notes from Morley\nget_notes(\"Morley_1595_01_Go_ye_my_canzonettes.mei\")\n</code></pre>"},{"location":"resources/mei-files/#file-statistics","title":"File Statistics","text":"Collection Files Period Style Bach 15 Baroque (1720s) Contrapuntal, Two-voice Bart\u00f3k 19 20th century (1926-1939) Progressive, Pedagogical Morley 12 Renaissance (1595) Vocal, Polyphonic"},{"location":"resources/mei-files/#adding-your-own-files","title":"Adding Your Own Files","text":"<p>Currently, encoding-music-mcp works only with the built-in collection. Future versions may support:</p> <ul> <li>Custom file paths</li> <li>User-provided MEI files</li> <li>URL-based file access</li> </ul>"},{"location":"resources/mei-files/#license-information","title":"License Information","text":"<p>Each file may have different licensing terms. Use <code>get_mei_metadata</code> to check copyright and availability information for specific files.</p>"},{"location":"resources/mei-files/#related-documentation","title":"Related Documentation","text":"<ul> <li>Bach Inventions Details</li> <li>Bart\u00f3k Mikrokosmos Details</li> <li>Morley Canzonets Details</li> <li>Discovery Tool</li> <li>Metadata Tool</li> </ul>"},{"location":"resources/morley/","title":"Morley Canzonets","text":"<p>Thomas Morley's Canzonets for Two Voices (1595).</p>"},{"location":"resources/morley/#overview","title":"Overview","text":"<p>The Canzonets or Little Short Songs to Two Voyces is a collection of light vocal music published by Thomas Morley in 1595. These pieces represent the English madrigal style and demonstrate Renaissance polyphonic writing for two voices.</p>"},{"location":"resources/morley/#collection-details","title":"Collection Details","text":"<ul> <li>Composer: Thomas Morley (c. 1557-1602)</li> <li>Period: Renaissance</li> <li>Year: 1595</li> <li>Format: Two-voice vocal works</li> <li>Files: 12 canzonets</li> </ul>"},{"location":"resources/morley/#file-naming","title":"File Naming","text":"<p>Files follow the pattern: <code>Morley_1595_XX_Title.mei</code></p> <p>Example: <code>Morley_1595_01_Go_ye_my_canzonettes.mei</code></p>"},{"location":"resources/morley/#musical-characteristics","title":"Musical Characteristics","text":""},{"location":"resources/morley/#style","title":"Style","text":"<ul> <li>English madrigal tradition</li> <li>Two-voice polyphony</li> <li>Text-driven rhythm</li> <li>Modal harmony</li> <li>Imitative counterpoint</li> </ul>"},{"location":"resources/morley/#texture","title":"Texture","text":"<ul> <li>Two independent vocal lines</li> <li>Frequent imitation</li> <li>Clear text declamation</li> <li>Balanced voice parts</li> </ul>"},{"location":"resources/morley/#compositional-techniques","title":"Compositional Techniques","text":"<ul> <li>Points of imitation</li> <li>Sequential patterns</li> <li>Cadential formulas</li> <li>Modal melodies</li> </ul>"},{"location":"resources/morley/#analysis-opportunities","title":"Analysis Opportunities","text":"<p>These files are ideal for studying:</p> <ul> <li>Renaissance counterpoint: Two-voice polyphony</li> <li>Modal harmony: Pre-tonal organization</li> <li>Text setting: Relationship between words and music</li> <li>Vocal writing: Singable melodic lines</li> <li>Imitative technique: How voices echo each other</li> </ul>"},{"location":"resources/morley/#key-analysis-considerations","title":"Key Analysis Considerations","text":"<p>Morley's music is modal, so key analysis may show:</p> <ul> <li>Ambiguous results: Modal music doesn't fit major/minor categories</li> <li>Lower confidence: Pre-tonal harmony differs from later music</li> <li>Historical context: Written before functional tonality developed</li> </ul>"},{"location":"resources/morley/#comparative-studies","title":"Comparative Studies","text":"<p>Compare with:</p> <ul> <li>Bach Inventions: Renaissance vs. Baroque counterpoint</li> <li>Bart\u00f3k: Renaissance vs. 20th-century modal writing</li> <li>Both: Evolution of two-voice writing</li> </ul>"},{"location":"resources/morley/#educational-value","title":"Educational Value","text":"<p>Perfect for: - Studying Renaissance polyphony - Understanding modal harmony - Analyzing text-music relationships - Learning imitative counterpoint - Exploring pre-tonal music</p>"},{"location":"resources/morley/#performance-context","title":"Performance Context","text":"<p>Originally intended for: - Domestic music-making - Amateur singers - Entertainment and recreation - Social gatherings</p>"},{"location":"resources/morley/#related-resources","title":"Related Resources","text":"<ul> <li>MEI Files Overview</li> <li>Bach Inventions - For Baroque comparison</li> <li>Bart\u00f3k Mikrokosmos - For modal comparison</li> <li>Interval Analysis Tools</li> </ul>"},{"location":"tools/","title":"Tools Overview","text":"<p>encoding-music-mcp provides a suite of tools for analyzing MEI files. All tools work with the built-in MEI collection.</p>"},{"location":"tools/#available-tools","title":"Available Tools","text":""},{"location":"tools/#discovery-tools","title":"Discovery Tools","text":"Tool Purpose Learn More <code>list_available_mei_files</code> Browse and discover the 46 built-in MEI files Documentation"},{"location":"tools/#metadata-tools","title":"Metadata Tools","text":"Tool Purpose Learn More <code>get_mei_metadata</code> Extract title, composer, editors, dates, and copyright info Documentation"},{"location":"tools/#analysis-tools","title":"Analysis Tools","text":"Tool Purpose Learn More <code>analyze_key</code> Detect musical key with confidence scores Documentation <code>get_notes</code> Extract all notes with pitch and octave information Documentation <code>get_melodic_intervals</code> Analyze melodic intervals within voices Documentation <code>get_harmonic_intervals</code> Analyze harmonic intervals between voices Documentation <code>get_melodic_ngrams</code> Find recurring melodic patterns Documentation"},{"location":"tools/#tool-categories","title":"Tool Categories","text":""},{"location":"tools/#discovery","title":"\ud83d\udd0d Discovery","text":"<p>Tools for exploring the MEI collection:</p> <ul> <li>list_available_mei_files: Browse files by composer</li> </ul>"},{"location":"tools/#metadata","title":"\ud83d\udccb Metadata","text":"<p>Tools for extracting descriptive information:</p> <ul> <li>get_mei_metadata: Get complete metadata from MEI headers</li> </ul>"},{"location":"tools/#musical-analysis","title":"\ud83c\udfb5 Musical Analysis","text":"<p>Tools for analyzing musical content:</p> <ul> <li>analyze_key: Key detection using music21</li> <li>Interval Analysis: Comprehensive interval analysis using CRIM Intervals<ul> <li>Notes extraction</li> <li>Melodic intervals</li> <li>Harmonic intervals</li> <li>N-gram pattern matching</li> </ul> </li> </ul>"},{"location":"tools/#tool-design-philosophy","title":"Tool Design Philosophy","text":"<p>All tools in encoding-music-mcp follow these principles:</p>"},{"location":"tools/#1-direct-file-access","title":"1. Direct File Access","text":"<p>Tools read directly from disk with no intermediate caching, ensuring:</p> <ul> <li>\u26a1 Fast response times</li> <li>\ud83d\udcbe Minimal memory usage</li> <li>\ud83d\udd04 Always up-to-date results</li> </ul>"},{"location":"tools/#2-structured-output","title":"2. Structured Output","text":"<p>All tools return structured dictionaries with consistent keys:</p> <pre><code>{\n    \"filename\": \"Bach_BWV_0772.mei\",  # Always included\n    \"key_name\": \"...\",                 # Tool-specific data\n    # ...\n}\n</code></pre>"},{"location":"tools/#3-error-handling","title":"3. Error Handling","text":"<p>Tools provide clear error messages when files don't exist or can't be processed:</p> <pre><code>FileNotFoundError: Could not load MEI file: nonexistent.mei\n</code></pre>"},{"location":"tools/#4-dataframe-format","title":"4. Dataframe Format","text":"<p>Analysis tools return data in readable tabular format:</p> <ul> <li>Rows: Measure and beat positions</li> <li>Columns: Voice parts or analysis dimensions</li> <li>Values: Musical data (notes, intervals, patterns)</li> </ul>"},{"location":"tools/#common-parameters","title":"Common Parameters","text":"<p>Most tools accept a <code>filename</code> parameter:</p> <pre><code>filename: str  # Name of the MEI file (e.g., \"Bach_BWV_0772.mei\")\n</code></pre> <p>Analysis tools may accept additional parameters:</p> <pre><code>n: int  # For ngrams: length of patterns (default: 4)\n</code></pre>"},{"location":"tools/#using-tools-with-ai-assistants","title":"Using Tools with AI Assistants","text":""},{"location":"tools/#natural-language-queries","title":"Natural Language Queries","text":"<p>Simply ask your AI assistant in natural language:</p> <ul> <li>\"What MEI files are available?\"</li> <li>\"Analyze the key of Bach_BWV_0772.mei\"</li> <li>\"Get melodic 5-grams from Bartok_Mikrokosmos_022.mei\"</li> </ul>"},{"location":"tools/#direct-tool-invocation","title":"Direct Tool Invocation","text":"<p>MCP clients can also invoke tools directly:</p> <pre><code>{\n  \"tool\": \"get_mei_metadata\",\n  \"arguments\": {\n    \"filename\": \"Bach_BWV_0772.mei\"\n  }\n}\n</code></pre>"},{"location":"tools/#next-steps","title":"Next Steps","text":"<ul> <li>Browse specific tool documentation using the navigation menu</li> <li>Try the Quick Start guide for examples</li> <li>Explore the MEI Resources available for analysis</li> </ul>"},{"location":"tools/discovery/","title":"list_available_mei_files","text":"<p>Discover all built-in MEI files organized by composer.</p>"},{"location":"tools/discovery/#overview","title":"Overview","text":"<p>The <code>list_available_mei_files</code> tool provides a complete inventory of the 46 MEI files included with encoding-music-mcp. Files are organized into three collections by composer.</p>"},{"location":"tools/discovery/#parameters","title":"Parameters","text":"<p>This tool takes no parameters.</p>"},{"location":"tools/discovery/#returns","title":"Returns","text":"<p>Returns a dictionary with four keys:</p> Key Type Description <code>bach_inventions</code> <code>List[str]</code> List of Bach Two-Part Invention filenames (15 files) <code>bartok_mikrokosmos</code> <code>List[str]</code> List of Bart\u00f3k Mikrokosmos filenames (19 files) <code>morley_canzonets</code> <code>List[str]</code> List of Morley Canzonet filenames (12 files) <code>all_files</code> <code>List[str]</code> Complete list of all 46 filenames"},{"location":"tools/discovery/#example-usage","title":"Example Usage","text":""},{"location":"tools/discovery/#with-claude-desktop","title":"With Claude Desktop","text":"<p>Natural language query</p> <p>\"What MEI files are available?\"</p>"},{"location":"tools/discovery/#example-output","title":"Example Output","text":"<pre><code>{\n  \"bach_inventions\": [\n    \"Bach_BWV_0772.mei\",\n    \"Bach_BWV_0773.mei\",\n    \"Bach_BWV_0774.mei\",\n    ...\n  ],\n  \"bartok_mikrokosmos\": [\n    \"Bartok_Mikrokosmos_022.mei\",\n    \"Bartok_Mikrokosmos_023.mei\",\n    ...\n  ],\n  \"morley_canzonets\": [\n    \"Morley_1595_01_Go_ye_my_canzonettes.mei\",\n    \"Morley_1595_02_When_lo_by_break.mei\",\n    ...\n  ],\n  \"all_files\": [\n    \"Bach_BWV_0772.mei\",\n    \"Bach_BWV_0773.mei\",\n    ...\n  ]\n}\n</code></pre>"},{"location":"tools/discovery/#use-cases","title":"Use Cases","text":""},{"location":"tools/discovery/#browsing-by-composer","title":"Browsing by Composer","text":"<p>Use the composer-specific lists to focus on particular repertoire:</p> <pre><code># Get only Bach inventions\nbach_files = result[\"bach_inventions\"]\n</code></pre>"},{"location":"tools/discovery/#batch-analysis","title":"Batch Analysis","text":"<p>Use <code>all_files</code> to process the entire collection:</p> <pre><code># Analyze keys of all pieces\nfor filename in result[\"all_files\"]:\n    key_info = analyze_key(filename)\n    print(f\"{filename}: {key_info['Key Name']}\")\n</code></pre>"},{"location":"tools/discovery/#collection-statistics","title":"Collection Statistics","text":"<p>Use the lists to gather collection information:</p> <pre><code>total_files = len(result[\"all_files\"])\nbach_count = len(result[\"bach_inventions\"])\nbartok_count = len(result[\"bartok_mikrokosmos\"])\nmorley_count = len(result[\"morley_canzonets\"])\n</code></pre>"},{"location":"tools/discovery/#file-naming-conventions","title":"File Naming Conventions","text":""},{"location":"tools/discovery/#bach-inventions","title":"Bach Inventions","text":"<p>Format: <code>Bach_BWV_XXXX.mei</code></p> <ul> <li><code>BWV</code>: Bach-Werke-Verzeichnis (Bach Works Catalog)</li> <li>Ranges from BWV 772 to BWV 786 (15 inventions)</li> </ul>"},{"location":"tools/discovery/#bartok-mikrokosmos","title":"Bart\u00f3k Mikrokosmos","text":"<p>Format: <code>Bartok_Mikrokosmos_XXX.mei</code></p> <ul> <li>Numbers correspond to Mikrokosmos volume and piece numbers</li> </ul>"},{"location":"tools/discovery/#morley-canzonets","title":"Morley Canzonets","text":"<p>Format: <code>Morley_1595_XX_Title.mei</code></p> <ul> <li><code>1595</code>: Publication year</li> <li>Includes descriptive titles</li> </ul>"},{"location":"tools/discovery/#related-tools","title":"Related Tools","text":"<ul> <li>get_mei_metadata - Get detailed information about specific files</li> <li>Resources: MEI Files - Learn more about the collection</li> </ul>"},{"location":"tools/discovery/#implementation","title":"Implementation","text":"<p>The tool scans the <code>resources</code> directory and categorizes files based on filename prefixes:</p> <ul> <li>Files starting with <code>Bach_BWV_</code> \u2192 Bach inventions</li> <li>Files starting with <code>Bartok_Mikrokosmos_</code> \u2192 Bart\u00f3k pieces</li> <li>Files starting with <code>Morley_</code> \u2192 Morley canzonets</li> </ul>"},{"location":"tools/key-analysis/","title":"analyze_key","text":"<p>Detect the musical key of a piece using music21's key detection algorithm.</p>"},{"location":"tools/key-analysis/#overview","title":"Overview","text":"<p>The <code>analyze_key</code> tool analyzes the pitch content of an MEI file to determine its musical key. It returns both the key name and a confidence factor indicating how certain the analysis is.</p>"},{"location":"tools/key-analysis/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>filename</code> <code>str</code> Yes Name of the MEI file (e.g., \"Bach_BWV_0772.mei\")"},{"location":"tools/key-analysis/#returns","title":"Returns","text":"<p>Returns a dictionary with two keys:</p> Key Type Description <code>Key Name</code> <code>str</code> Detected key (e.g., \"C major\", \"a minor\") <code>Confidence Factor</code> <code>float</code> Correlation coefficient between 0.0 and 1.0"},{"location":"tools/key-analysis/#example-usage","title":"Example Usage","text":""},{"location":"tools/key-analysis/#with-claude-desktop","title":"With Claude Desktop","text":"<p>Natural language queries</p> <ul> <li>\"What key is Bach_BWV_0772.mei in?\"</li> <li>\"Analyze the key of Morley_1595_01_Go_ye_my_canzonettes.mei\"</li> <li>\"Compare the keys of all Bach inventions\"</li> </ul>"},{"location":"tools/key-analysis/#example-output","title":"Example Output","text":"<pre><code>{\n  \"Key Name\": \"C major\",\n  \"Confidence Factor\": 0.9451\n}\n</code></pre>"},{"location":"tools/key-analysis/#understanding-confidence-factors","title":"Understanding Confidence Factors","text":"<p>The confidence factor indicates how strongly the pitch content matches the detected key:</p> Range Interpretation Example 0.8 - 1.0 Very confident - clear tonal center Bach inventions, typical Classical/Romantic works 0.5 - 0.8 Moderate confidence - some ambiguity Modal pieces, early music, chromatic passages 0.0 - 0.5 Low confidence - weak or ambiguous tonality Atonal music, highly chromatic music <p>Interpreting Results</p> <p>High confidence doesn't always mean the analysis is \"correct\" - it means the pitch content strongly correlates with a particular key profile. Some pieces may be:</p> <ul> <li>Modal: May report as major/minor with lower confidence</li> <li>Modulating: Reports the overall or most prominent key</li> <li>Chromatic: May have lower confidence even if clearly tonal</li> </ul>"},{"location":"tools/key-analysis/#use-cases","title":"Use Cases","text":""},{"location":"tools/key-analysis/#single-piece-analysis","title":"Single Piece Analysis","text":"<p>Determine the key of a specific piece:</p> <pre><code>result = analyze_key(\"Bach_BWV_0772.mei\")\nprint(f\"Key: {result['Key Name']}\")\nprint(f\"Confidence: {result['Confidence Factor']:.2%}\")\n</code></pre>"},{"location":"tools/key-analysis/#batch-analysis","title":"Batch Analysis","text":"<p>Compare keys across a collection:</p> <pre><code>files = list_available_mei_files()\nfor filename in files[\"bach_inventions\"]:\n    key_info = analyze_key(filename)\n    print(f\"{filename}: {key_info['Key Name']} \"\n          f\"({key_info['Confidence Factor']:.2f})\")\n</code></pre>"},{"location":"tools/key-analysis/#key-distribution-study","title":"Key Distribution Study","text":"<p>Analyze key usage in a corpus:</p> <pre><code>from collections import Counter\n\nkeys = []\nfor filename in all_files:\n    result = analyze_key(filename)\n    keys.append(result['Key Name'])\n\nkey_counts = Counter(keys)\nprint(f\"Most common keys: {key_counts.most_common(5)}\")\n</code></pre>"},{"location":"tools/key-analysis/#algorithm","title":"Algorithm","text":"<p>The tool uses music21's Krumhansl-Schmuckler key-finding algorithm, which:</p> <ol> <li>Extracts all pitches from the score</li> <li>Calculates a pitch-class distribution</li> <li>Correlates with major and minor key profiles</li> <li>Returns the key with the highest correlation</li> </ol>"},{"location":"tools/key-analysis/#key-name-format","title":"Key Name Format","text":"<p>Keys are formatted as:</p> <ul> <li>Major keys: Capital letter + \"major\" (e.g., \"C major\", \"F major\")</li> <li>Minor keys: Lowercase letter + \"minor\" (e.g., \"a minor\", \"d minor\")</li> <li>Accidentals: Sharps (#) or flats (b) as needed (e.g., \"F# major\", \"B\u266d major\")</li> </ul>"},{"location":"tools/key-analysis/#limitations","title":"Limitations","text":""},{"location":"tools/key-analysis/#what-this-tool-cant-do","title":"What This Tool Can't Do","text":"<ul> <li>Detect modulations: Reports overall key, not key changes</li> <li>Handle polytonality: Reports single dominant key</li> <li>Distinguish modes: Reports as major or minor</li> <li>Detect ambiguous cases: Will still return highest correlation</li> </ul> <p>Non-tonal Music</p> <p>For atonal, serial, or highly experimental music, the confidence factor will be low and the reported key may not be meaningful.</p>"},{"location":"tools/key-analysis/#related-tools","title":"Related Tools","text":"<ul> <li>get_melodic_intervals - Analyze melodic content</li> <li>get_harmonic_intervals - Analyze harmonic content</li> <li>list_available_mei_files - Find files to analyze</li> </ul>"},{"location":"tools/key-analysis/#error-handling","title":"Error Handling","text":"<p>If a file doesn't exist:</p> <pre><code>FileNotFoundError: [Errno 2] No such file or directory:\n  'src/encoding_music_mcp/resources/nonexistent.mei'\n</code></pre>"},{"location":"tools/key-analysis/#implementation","title":"Implementation","text":"<p>Uses the music21 library:</p> <pre><code>score = converter.parse(filepath)\nkey_analysis = score.analyze('key')\n</code></pre>"},{"location":"tools/metadata/","title":"get_mei_metadata","text":"<p>Extract comprehensive metadata from MEI file headers.</p>"},{"location":"tools/metadata/#overview","title":"Overview","text":"<p>The <code>get_mei_metadata</code> tool extracts descriptive information from MEI files, including title, composer, editors, analysts, publication dates, and copyright information.</p>"},{"location":"tools/metadata/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>filename</code> <code>str</code> Yes Name of the MEI file (e.g., \"Bach_BWV_0772.mei\")"},{"location":"tools/metadata/#returns","title":"Returns","text":"<p>Returns a dictionary with the following keys:</p> Key Type Description <code>title</code> <code>str</code> Title of the work <code>composer</code> <code>str</code> Composer name <code>mei_editors</code> <code>List[str]</code> List of MEI encoding editors <code>xml_editors</code> <code>List[str]</code> List of XML editors <code>analysts</code> <code>List[str]</code> List of analysts who worked on the encoding <code>publication_date</code> <code>str \\| None</code> Publication or encoding date <code>copyright</code> <code>str \\| None</code> Copyright or availability information <code>application</code> <code>str \\| None</code> Software used to create the MEI file"},{"location":"tools/metadata/#example-usage","title":"Example Usage","text":""},{"location":"tools/metadata/#with-claude-desktop","title":"With Claude Desktop","text":"<p>Natural language queries</p> <ul> <li>\"Tell me about Bach_BWV_0772.mei\"</li> <li>\"What's the metadata for Bartok_Mikrokosmos_022.mei?\"</li> <li>\"Who encoded Morley_1595_01_Go_ye_my_canzonettes.mei?\"</li> </ul>"},{"location":"tools/metadata/#example-output","title":"Example Output","text":"<pre><code>{\n  \"title\": \"Invention No. 1 in C major\",\n  \"composer\": \"Bach, Johann Sebastian\",\n  \"mei_editors\": [\"Freedman, Richard\"],\n  \"xml_editors\": [\"Sch\u00f6lkopf, Tobias\"],\n  \"analysts\": [\"Student, This\"],\n  \"publication_date\": \"2024-11-19\",\n  \"copyright\": \"Available under CC-BY-NC-SA 4.0\",\n  \"application\": \"Sibelius 8.7.0\"\n}\n</code></pre>"},{"location":"tools/metadata/#use-cases","title":"Use Cases","text":""},{"location":"tools/metadata/#cataloging","title":"Cataloging","text":"<p>Build a catalog of your MEI collection:</p> <pre><code>metadata = get_mei_metadata(\"Bach_BWV_0772.mei\")\nprint(f\"{metadata['composer']}: {metadata['title']}\")\n</code></pre>"},{"location":"tools/metadata/#attribution","title":"Attribution","text":"<p>Track who contributed to the encoding:</p> <pre><code>print(f\"MEI Editors: {', '.join(metadata['mei_editors'])}\")\nprint(f\"Analysts: {', '.join(metadata['analysts'])}\")\n</code></pre>"},{"location":"tools/metadata/#quality-control","title":"Quality Control","text":"<p>Verify encoding information before analysis:</p> <pre><code>if metadata['publication_date']:\n    print(f\"Last updated: {metadata['publication_date']}\")\n</code></pre>"},{"location":"tools/metadata/#metadata-sources","title":"Metadata Sources","text":"<p>The tool extracts information from MEI header elements:</p> <ul> <li><code>&lt;title&gt;</code>: Work title</li> <li><code>&lt;composer&gt;</code>: Composer name</li> <li><code>&lt;editor&gt;</code>: Editor and analyst information (with role attributes)</li> <li><code>&lt;pubStmt&gt;</code>: Publication and date information</li> <li><code>&lt;availability&gt;</code>: Copyright and licensing</li> <li><code>&lt;appInfo&gt;</code>: Software used for encoding</li> </ul>"},{"location":"tools/metadata/#error-handling","title":"Error Handling","text":"<p>If a file doesn't exist:</p> <pre><code>FileNotFoundError: [Errno 2] No such file or directory:\n  'src/encoding_music_mcp/resources/nonexistent.mei'\n</code></pre>"},{"location":"tools/metadata/#related-tools","title":"Related Tools","text":"<ul> <li>list_available_mei_files - Discover available files</li> <li>Resources: MEI Files - Learn about the collection</li> </ul>"},{"location":"tools/metadata/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Empty fields return empty lists <code>[]</code> or <code>None</code> rather than raising errors</li> <li>Multiple editors/analysts are returned as lists</li> <li>Date formats may vary by file</li> </ul>"},{"location":"tools/intervals/","title":"Interval Analysis Tools","text":"<p>Comprehensive interval analysis using the CRIM Intervals library.</p>"},{"location":"tools/intervals/#overview","title":"Overview","text":"<p>The interval analysis tools provide detailed melodic and harmonic analysis of MEI files. Built on the CRIM Intervals library, these tools extract notes, calculate intervals, and identify recurring patterns.</p>"},{"location":"tools/intervals/#available-tools","title":"Available Tools","text":"Tool Purpose Learn More <code>get_notes</code> Extract all notes with pitch and octave information Documentation <code>get_melodic_intervals</code> Calculate melodic intervals within each voice Documentation <code>get_harmonic_intervals</code> Calculate harmonic intervals between voices Documentation <code>get_melodic_ngrams</code> Find recurring melodic patterns (n-grams) Documentation"},{"location":"tools/intervals/#common-features","title":"Common Features","text":"<p>All interval tools share these characteristics:</p>"},{"location":"tools/intervals/#dataframe-format","title":"Dataframe Format","text":"<p>Results are returned as formatted strings representing dataframes:</p> <ul> <li>Rows: Measure and beat positions (e.g., <code>1.0 1.500</code> = measure 1, beat 1.5)</li> <li>Columns: Voice parts numbered sequentially (1, 2, 3, ...)</li> <li>Values: Notes, intervals, or patterns</li> </ul>"},{"location":"tools/intervals/#example-structure","title":"Example Structure","text":"<pre><code>                  1     2\nMeasure Beat\n1.0     1.000  Rest  Rest\n        1.250    C4   NaN\n        1.500    D4   NaN\n        1.750    E4   NaN\n</code></pre>"},{"location":"tools/intervals/#return-format","title":"Return Format","text":"<p>All tools return dictionaries with consistent keys:</p> <pre><code>{\n    \"filename\": \"Bach_BWV_0772.mei\",\n    \"notes\": \"...\",        # Or melodic_intervals, harmonic_intervals, melodic_ngrams\n    # Additional keys depending on tool\n}\n</code></pre>"},{"location":"tools/intervals/#understanding-intervals","title":"Understanding Intervals","text":""},{"location":"tools/intervals/#interval-notation","title":"Interval Notation","text":"<p>Intervals use standard music theory abbreviations:</p> Notation Meaning Semitones <code>P1</code> Perfect unison 0 <code>m2</code> Minor 2nd 1 <code>M2</code> Major 2nd 2 <code>m3</code> Minor 3rd 3 <code>M3</code> Major 3rd 4 <code>P4</code> Perfect 4th 5 <code>A4</code> Augmented 4th 6 <code>d5</code> Diminished 5th 6 <code>P5</code> Perfect 5th 7 <code>m6</code> Minor 6th 8 <code>M6</code> Major 6th 9 <code>m7</code> Minor 7th 10 <code>M7</code> Major 7th 11 <code>P8</code> Perfect octave 12"},{"location":"tools/intervals/#direction","title":"Direction","text":"<ul> <li>Positive intervals: Ascending motion (e.g., <code>M3</code>)</li> <li>Negative intervals: Descending motion (e.g., <code>-M3</code>)</li> </ul>"},{"location":"tools/intervals/#compound-intervals","title":"Compound Intervals","text":"<p>Intervals larger than an octave use numbers above 8:</p> <ul> <li><code>M9</code> = Major 9th (octave + major 2nd)</li> <li><code>P11</code> = Perfect 11th (octave + perfect 4th)</li> <li><code>M13</code> = Major 13th (octave + major 6th)</li> </ul>"},{"location":"tools/intervals/#workflow","title":"Workflow","text":"<p>A typical analysis workflow might be:</p> <ol> <li>Extract Notes with <code>get_notes</code></li> <li>Analyze Melody with <code>get_melodic_intervals</code></li> <li>Analyze Harmony with <code>get_harmonic_intervals</code></li> <li>Find Patterns with <code>get_melodic_ngrams</code></li> </ol>"},{"location":"tools/intervals/#use-cases","title":"Use Cases","text":""},{"location":"tools/intervals/#melodic-analysis","title":"Melodic Analysis","text":"<ul> <li>Identify stepwise vs. leaping motion</li> <li>Analyze melodic contour</li> <li>Find recurring motivic patterns</li> </ul>"},{"location":"tools/intervals/#harmonic-analysis","title":"Harmonic Analysis","text":"<ul> <li>Study voice leading</li> <li>Identify consonance and dissonance</li> <li>Analyze harmonic rhythm</li> </ul>"},{"location":"tools/intervals/#pattern-recognition","title":"Pattern Recognition","text":"<ul> <li>Find recurring melodic figures</li> <li>Compare motivic usage across pieces</li> <li>Identify sequences and imitations</li> </ul>"},{"location":"tools/intervals/#comparative-studies","title":"Comparative Studies","text":"<ul> <li>Compare interval usage across composers</li> <li>Analyze stylistic differences</li> <li>Study historical trends</li> </ul>"},{"location":"tools/intervals/#about-crim-intervals","title":"About CRIM Intervals","text":"<p>CRIM Intervals is a Python library developed by the CRIM (Citations: The Renaissance Imitation Mass) Project for analyzing Renaissance polyphony. It provides:</p> <ul> <li>Robust interval calculation</li> <li>N-gram pattern matching</li> <li>Support for various music encoding formats</li> <li>Integration with music21</li> </ul>"},{"location":"tools/intervals/#next-steps","title":"Next Steps","text":"<p>Explore the individual tool documentation:</p> <ul> <li>Notes Extraction</li> <li>Melodic Intervals</li> <li>Harmonic Intervals</li> <li>Melodic N-grams</li> </ul>"},{"location":"tools/intervals/harmonic/","title":"get_harmonic_intervals","text":"<p>Calculate harmonic intervals between voice parts.</p>"},{"location":"tools/intervals/harmonic/#overview","title":"Overview","text":"<p>The <code>get_harmonic_intervals</code> tool analyzes the vertical (harmonic) relationships between voices, calculating the interval between simultaneously sounding notes.</p>"},{"location":"tools/intervals/harmonic/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>filename</code> <code>str</code> Yes Name of the MEI file (e.g., \"Bach_BWV_0772.mei\")"},{"location":"tools/intervals/harmonic/#returns","title":"Returns","text":"Key Type Description <code>filename</code> <code>str</code> The input filename <code>harmonic_intervals</code> <code>str</code> CSV representation of intervals dataframe"},{"location":"tools/intervals/harmonic/#example-output","title":"Example Output","text":"<pre><code>Measure,Beat,2_1\n1.0,1.0,Rest\n1.0,1.25,Rest\n1.0,3.25,P12\n1.0,3.5,m14\n1.0,3.75,m13\n1.0,4.0,A11\n1.0,4.25,M13\n1.0,4.5,m13\n1.0,4.75,P15\n2.0,1.0,P12\n</code></pre>"},{"location":"tools/intervals/harmonic/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"tools/intervals/harmonic/#column-names","title":"Column Names","text":"<ul> <li><code>2_1</code>: Interval from voice 2 to voice 1 (lower to upper)</li> <li><code>3_2</code>: Interval from voice 3 to voice 2</li> <li>Multi-voice pieces will have multiple columns</li> </ul>"},{"location":"tools/intervals/harmonic/#interval-values","title":"Interval Values","text":"<ul> <li>Compound intervals: Numbers &gt; 8 (e.g., <code>P12</code> = octave + perfect 5th)</li> <li>Simple intervals: Numbers \u2264 8 (e.g., <code>P5</code>, <code>M3</code>)</li> <li>Rest: One or both voices resting</li> <li>NaN: Not applicable (voices not sounding together)</li> </ul>"},{"location":"tools/intervals/harmonic/#common-harmonic-intervals","title":"Common Harmonic Intervals","text":"Interval Quality Example <code>P1</code> Perfect unison Same pitch <code>M3</code> Major third Consonant <code>m3</code> Minor third Consonant <code>P5</code> Perfect fifth Consonant <code>M6</code> Major sixth Consonant <code>m7</code> Minor seventh Dissonant <code>M7</code> Major seventh Dissonant <code>P8</code> Perfect octave Consonant <code>P12</code> Perfect 12th Compound 5th <code>M13</code> Major 13th Compound 6th"},{"location":"tools/intervals/harmonic/#use-cases","title":"Use Cases","text":""},{"location":"tools/intervals/harmonic/#consonance-and-dissonance-analysis","title":"Consonance and Dissonance Analysis","text":"<p>Identify harmonic stability:</p> <ul> <li>Consonant: <code>P1</code>, <code>m3</code>, <code>M3</code>, <code>P5</code>, <code>m6</code>, <code>M6</code>, <code>P8</code></li> <li>Dissonant: <code>m2</code>, <code>M2</code>, <code>A4</code>, <code>d5</code>, <code>m7</code>, <code>M7</code></li> </ul>"},{"location":"tools/intervals/harmonic/#voice-leading-study","title":"Voice Leading Study","text":"<p>Track how harmonic intervals change over time:</p> <pre><code>P8 \u2192 M10 \u2192 P12 (expanding motion)\nP12 \u2192 M10 \u2192 P8 (contracting motion)\n</code></pre>"},{"location":"tools/intervals/harmonic/#parallel-motion-detection","title":"Parallel Motion Detection","text":"<p>Look for sequences of the same interval:</p> <pre><code>M3, M3, M3 (parallel thirds)\nP5, P5, P5 (parallel fifths - often avoided in counterpoint)\n</code></pre>"},{"location":"tools/intervals/harmonic/#harmonic-rhythm","title":"Harmonic Rhythm","text":"<p>Analyze how often harmonies change by looking at interval changes.</p>"},{"location":"tools/intervals/harmonic/#related-tools","title":"Related Tools","text":"<ul> <li>get_melodic_intervals - Analyze melodic motion</li> <li>get_notes - See the actual notes</li> <li>analyze_key - Determine overall tonality</li> </ul>"},{"location":"tools/intervals/melodic/","title":"get_melodic_intervals","text":"<p>Calculate melodic intervals within each voice part.</p>"},{"location":"tools/intervals/melodic/#overview","title":"Overview","text":"<p>The <code>get_melodic_intervals</code> tool analyzes the melodic motion within each voice, calculating the interval between each consecutive pair of notes.</p>"},{"location":"tools/intervals/melodic/#parameters","title":"Parameters","text":"Parameter Type Required Default Description <code>filename</code> <code>str</code> Yes - Name of the MEI file (e.g., \"Bach_BWV_0772.mei\") <code>kind</code> <code>str</code> No 'd' Interval type: 'd' (diatonic), 'c' (chromatic), 'q' (with quality), 'z' (zero-based)"},{"location":"tools/intervals/melodic/#returns","title":"Returns","text":"Key Type Description <code>filename</code> <code>str</code> The input filename <code>kind</code> <code>str</code> The interval type used <code>melodic_intervals</code> <code>str</code> CSV representation of intervals dataframe"},{"location":"tools/intervals/melodic/#example-output","title":"Example Output","text":"<pre><code>Measure,Beat,1,2\n1.0,1.0,Rest,Rest\n1.0,1.5,M2,\n1.0,1.75,M2,\n1.0,2.0,m2,\n1.0,2.25,-m3,\n1.0,2.5,M2,\n1.0,2.75,-M3,\n1.0,3.0,P5,\n1.0,3.5,P4,M2\n</code></pre>"},{"location":"tools/intervals/melodic/#understanding-the-output","title":"Understanding the Output","text":"<ul> <li>Positive intervals: Ascending motion (e.g., <code>M2</code> = up a major second)</li> <li>Negative intervals: Descending motion (e.g., <code>-M3</code> = down a major third)</li> <li>Rest: Beginning of melodic line</li> <li>NaN: Voice is silent</li> </ul>"},{"location":"tools/intervals/melodic/#interval-types-kind-parameter","title":"Interval Types (<code>kind</code> parameter)","text":"<p>The <code>kind</code> parameter controls how intervals are calculated:</p>"},{"location":"tools/intervals/melodic/#diatonic-kindd-default","title":"Diatonic (<code>kind='d'</code>, default)","text":"<p>Basic scale degrees without quality information:</p> <pre><code>result = get_melodic_intervals(\"Bach_BWV_0772.mei\", kind='d')\n# Example: 2, -3, 5 (up 2nd, down 3rd, up 5th)\n</code></pre>"},{"location":"tools/intervals/melodic/#chromatic-kindc","title":"Chromatic (<code>kind='c'</code>)","text":"<p>Semitone distances - useful for atonal/twelve-tone analysis:</p> <pre><code>result = get_melodic_intervals(\"Bach_BWV_0772.mei\", kind='c')\n# Example: 2, -4, 7 (up 2 semitones, down 4 semitones, up 7 semitones)\n</code></pre>"},{"location":"tools/intervals/melodic/#with-quality-kindq","title":"With Quality (<code>kind='q'</code>)","text":"<p>Includes major/minor/perfect quality - ideal for detailed tonal analysis:</p> <pre><code>result = get_melodic_intervals(\"Bach_BWV_0772.mei\", kind='q')\n# Example: M2, -m3, P5 (major 2nd up, minor 3rd down, perfect 5th up)\n</code></pre> <p>This is the most detailed option and is shown in the example output above.</p>"},{"location":"tools/intervals/melodic/#zero-based-kindz","title":"Zero-based (<code>kind='z'</code>)","text":"<p>Zero-indexed diatonic intervals for computational analysis:</p> <pre><code>result = get_melodic_intervals(\"Bach_BWV_0772.mei\", kind='z')\n# Example: 1, -2, 4 (same as 2, -3, 5 but zero-indexed)\n</code></pre> <p>Which Kind to Use?</p> <ul> <li>'d' - Quick overview of melodic motion</li> <li>'c' - Analyzing chromatic or atonal music</li> <li>'q' - Detailed tonal analysis (most common)</li> <li>'z' - Statistical or computational work</li> </ul>"},{"location":"tools/intervals/melodic/#common-melodic-intervals","title":"Common Melodic Intervals","text":"Interval Semitones Musical Distance <code>M2</code> 2 Whole step up <code>m2</code> 1 Half step up <code>M3</code> 4 Major third up <code>m3</code> 3 Minor third up <code>P4</code> 5 Perfect fourth up <code>P5</code> 7 Perfect fifth up <code>P8</code> 12 Octave up"},{"location":"tools/intervals/melodic/#use-cases","title":"Use Cases","text":""},{"location":"tools/intervals/melodic/#melodic-contour-analysis","title":"Melodic Contour Analysis","text":"<p>Identify stepwise vs. leaping motion:</p> <ul> <li>Steps: <code>M2</code>, <code>m2</code>, <code>-M2</code>, <code>-m2</code></li> <li>Leaps: <code>M3</code>, <code>P4</code>, <code>P5</code>, etc.</li> </ul>"},{"location":"tools/intervals/melodic/#identify-melodic-patterns","title":"Identify Melodic Patterns","text":"<p>Look for recurring interval sequences:</p> <pre><code>M2, M2, m2 (ascending major scale fragment)\n-m3, M2, -m3 (zig-zag pattern)\n</code></pre>"},{"location":"tools/intervals/melodic/#voice-leading-study","title":"Voice Leading Study","text":"<p>Analyze how each voice moves independently:</p> <ul> <li>Mostly stepwise = smooth voice leading</li> <li>Many leaps = more disjunct motion</li> </ul>"},{"location":"tools/intervals/melodic/#stylistic-analysis","title":"Stylistic Analysis","text":"<p>Compare interval usage across composers or periods:</p> <ul> <li>Renaissance: Mostly stepwise</li> <li>Baroque: Mix of steps and leaps</li> <li>Romantic: Larger leaps more common</li> </ul>"},{"location":"tools/intervals/melodic/#related-tools","title":"Related Tools","text":"<ul> <li>get_notes - See the actual notes</li> <li>get_melodic_ngrams - Find recurring patterns</li> <li>get_harmonic_intervals - Analyze intervals between voices</li> </ul>"},{"location":"tools/intervals/ngrams/","title":"get_melodic_ngrams","text":"<p>Find recurring melodic patterns using n-gram analysis.</p>"},{"location":"tools/intervals/ngrams/#overview","title":"Overview","text":"<p>The <code>get_melodic_ngrams</code> tool identifies sequences of melodic intervals (n-grams) in each voice. This is useful for finding recurring motifs, sequences, and melodic patterns.</p>"},{"location":"tools/intervals/ngrams/#parameters","title":"Parameters","text":"Parameter Type Required Default Description <code>filename</code> <code>str</code> Yes - Name of the MEI file <code>n</code> <code>int</code> No 4 Length of n-grams to extract <code>kind</code> <code>str</code> No 'd' Interval type: 'd' (diatonic), 'c' (chromatic), 'q' (with quality), 'z' (zero-based) <code>entries</code> <code>bool</code> No False Filter to thematic entries only (after rests/breaks)"},{"location":"tools/intervals/ngrams/#returns","title":"Returns","text":"Key Type Description <code>filename</code> <code>str</code> The input filename <code>n</code> <code>int</code> The n-gram length used <code>kind</code> <code>str</code> The interval type used <code>entries</code> <code>bool</code> Whether entry filtering was applied <code>melodic_ngrams</code> <code>str</code> CSV representation of n-grams dataframe"},{"location":"tools/intervals/ngrams/#example-output","title":"Example Output","text":""},{"location":"tools/intervals/ngrams/#with-n4-default","title":"With n=4 (default)","text":"<pre><code>Measure,Beat,1,2\n1.0,1.5,2_2_2_-3,\n1.0,1.75,2_2_-3_2,\n1.0,2.0,2_-3_2_-3,\n1.0,2.25,-3_2_-3_5,\n1.0,2.5,2_-3_5_4,\n1.0,3.5,4_-2_2_2,2_2_2_-3\n</code></pre>"},{"location":"tools/intervals/ngrams/#with-n3","title":"With n=3","text":"<pre><code>Measure,Beat,1,2\n1.0,1.5,2_2_2,\n1.0,1.75,2_2_-3,\n1.0,2.0,2_-3_2,\n1.0,2.25,-3_2_-3,\n</code></pre>"},{"location":"tools/intervals/ngrams/#understanding-n-grams","title":"Understanding N-grams","text":""},{"location":"tools/intervals/ngrams/#format","title":"Format","text":"<p>N-grams are represented as underscore-separated interval sequences:</p> <ul> <li><code>2_2_2_-3</code> = M2, M2, M2, -m3 (three major seconds up, then minor third down)</li> <li><code>5_4_-2</code> = P5, P4, -M2 (fifth up, fourth up, major second down)</li> </ul>"},{"location":"tools/intervals/ngrams/#choosing-n","title":"Choosing N","text":"<ul> <li>n=2: Very short patterns, many matches</li> <li>n=3: Short motifs</li> <li>n=4: Standard motif length (default)</li> <li>n=5-6: Longer phrases</li> <li>n=7+: Extended melodic ideas</li> </ul> <p>Finding the Right N</p> <p>Start with n=4. If patterns are too common, increase n. If too few matches, decrease n.</p>"},{"location":"tools/intervals/ngrams/#interval-types-kind-parameter","title":"Interval Types (<code>kind</code> parameter)","text":"<p>The <code>kind</code> parameter controls how intervals are calculated:</p>"},{"location":"tools/intervals/ngrams/#diatonic-kindd-default","title":"Diatonic (<code>kind='d'</code>, default)","text":"<p>Basic scale degrees, no quality information:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", kind='d')\n# Example: 2_-3_2 (up 2nd, down 3rd, up 2nd)\n</code></pre>"},{"location":"tools/intervals/ngrams/#chromatic-kindc","title":"Chromatic (<code>kind='c'</code>)","text":"<p>Semitone distances:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", kind='c')\n# Example: 2_-4_2 (up 2 semitones, down 4 semitones, up 2 semitones)\n</code></pre>"},{"location":"tools/intervals/ngrams/#with-quality-kindq","title":"With Quality (<code>kind='q'</code>)","text":"<p>Includes major/minor/perfect quality - ideal for tonal analysis:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", kind='q')\n# Example: M2_-m3_M2 (major 2nd up, minor 3rd down, major 2nd up)\n</code></pre>"},{"location":"tools/intervals/ngrams/#zero-based-kindz","title":"Zero-based (<code>kind='z'</code>)","text":"<p>Zero-indexed diatonic intervals (for computational analysis):</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", kind='z')\n# Example: 1_-2_1 (same as 2_-3_2 but zero-indexed)\n</code></pre> <p>Which Kind to Use?</p> <ul> <li>'d' - General pattern recognition</li> <li>'c' - Atonal/twelve-tone analysis</li> <li>'q' - Tonal/harmonic analysis (most detailed)</li> <li>'z' - Computational/statistical analysis</li> </ul>"},{"location":"tools/intervals/ngrams/#thematic-entries-entries-parameter","title":"Thematic Entries (<code>entries</code> parameter)","text":"<p>The <code>entries</code> parameter filters ngrams to show only those occurring after:</p> <ul> <li>Rests</li> <li>Section breaks</li> <li>Fermatas</li> </ul> <p>This is extremely useful for identifying thematic material and primary motives.</p>"},{"location":"tools/intervals/ngrams/#standard-analysis-all-ngrams","title":"Standard Analysis (all ngrams)","text":"<pre><code>result = get_melodic_ngrams(\"Morley_1595_01_Go_ye_my_canzonettes.mei\", n=4)\n# Returns hundreds of ngrams\n</code></pre>"},{"location":"tools/intervals/ngrams/#thematic-analysis-entries-only","title":"Thematic Analysis (entries only)","text":"<pre><code>result = get_melodic_ngrams(\n    \"Morley_1595_01_Go_ye_my_canzonettes.mei\",\n    n=4,\n    entries=True\n)\n# Returns only ~13 thematic entries - the main motives!\n</code></pre> <p>Example output with <code>entries=True</code>:</p> <pre><code>Measure,Beat,Offset,1,2\n1.0,1.0,0.0,1_1_2_1,\n2.0,1.0,4.0,,1_1_2_1\n9.0,1.0,32.0,1_1_2_1,\n14.0,2.0,53.0,,1_1_4_-3\n21.0,4.0,83.0,-4_2_2_-3,\n</code></pre> <p>Thematic Analysis Workflow</p> <ol> <li>Use <code>entries=True</code> to find main motives</li> <li>Use <code>entries=False</code> (default) to see all occurrences</li> <li>Compare entry patterns across pieces to find thematic relationships</li> </ol>"},{"location":"tools/intervals/ngrams/#use-cases","title":"Use Cases","text":""},{"location":"tools/intervals/ngrams/#find-recurring-motifs","title":"Find Recurring Motifs","text":"<p>Identify melodic ideas that repeat:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", n=4)\n# Look for the same pattern appearing multiple times\n</code></pre>"},{"location":"tools/intervals/ngrams/#sequence-detection","title":"Sequence Detection","text":"<p>Find sequences (patterns that repeat at different pitch levels):</p> <pre><code>2_2_2 appearing multiple times = ascending major scale fragments\n</code></pre>"},{"location":"tools/intervals/ngrams/#motivic-analysis","title":"Motivic Analysis","text":"<p>Compare motifs across pieces:</p> <pre><code>bach_ngrams = get_melodic_ngrams(\"Bach_BWV_0772.mei\")\nbartok_ngrams = get_melodic_ngrams(\"Bartok_Mikrokosmos_022.mei\")\n# Compare common patterns\n</code></pre>"},{"location":"tools/intervals/ngrams/#imitation-study","title":"Imitation Study","text":"<p>Find where voices imitate each other's melodies:</p> <pre><code>Voice 1: 2_2_2_-3 at measure 1\nVoice 2: 2_2_2_-3 at measure 3 (imitation!)\n</code></pre>"},{"location":"tools/intervals/ngrams/#pattern-interpretation","title":"Pattern Interpretation","text":""},{"location":"tools/intervals/ngrams/#reading-interval-sequences","title":"Reading Interval Sequences","text":"<p>Example: <code>2_-3_2_-3</code></p> <ol> <li>M2 up (major second ascending)</li> <li>-m3 down (minor third descending)</li> <li>M2 up (major second ascending)</li> <li>-m3 down (minor third descending)</li> </ol> <p>This creates a zig-zag pattern.</p>"},{"location":"tools/intervals/ngrams/#common-patterns","title":"Common Patterns","text":"Pattern Meaning <code>2_2_2</code> Ascending major scale fragment <code>-2_-2_-2</code> Descending major scale fragment <code>3_4</code> Minor triad outline <code>4_3</code> Major triad outline <code>7_0_-7</code> Octave leap and return"},{"location":"tools/intervals/ngrams/#adjusting-analysis","title":"Adjusting Analysis","text":""},{"location":"tools/intervals/ngrams/#for-short-motifs","title":"For Short Motifs","text":"<p>Use smaller n:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", n=3)\n</code></pre>"},{"location":"tools/intervals/ngrams/#for-extended-phrases","title":"For Extended Phrases","text":"<p>Use larger n:</p> <pre><code>result = get_melodic_ngrams(\"Bach_BWV_0772.mei\", n=6)\n</code></pre>"},{"location":"tools/intervals/ngrams/#related-tools","title":"Related Tools","text":"<ul> <li>get_melodic_intervals - See the underlying intervals</li> <li>get_notes - See the actual notes</li> <li>Intervals Overview - Learn about interval analysis</li> </ul>"},{"location":"tools/intervals/notes/","title":"get_notes","text":"<p>Extract all notes from an MEI file with pitch and octave information.</p>"},{"location":"tools/intervals/notes/#overview","title":"Overview","text":"<p>The <code>get_notes</code> tool extracts every note from an MEI file, displaying pitch names and octave numbers organized by measure, beat, and voice part.</p>"},{"location":"tools/intervals/notes/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>filename</code> <code>str</code> Yes Name of the MEI file (e.g., \"Bach_BWV_0772.mei\")"},{"location":"tools/intervals/notes/#returns","title":"Returns","text":"Key Type Description <code>filename</code> <code>str</code> The input filename <code>notes</code> <code>str</code> CSV representation of notes dataframe"},{"location":"tools/intervals/notes/#example-output","title":"Example Output","text":"<pre><code>Measure,Beat,1,2\n1.0,1.0,Rest,Rest\n1.0,1.25,C4,\n1.0,1.5,D4,\n1.0,1.75,E4,\n1.0,2.0,F4,\n1.0,2.25,D4,\n1.0,2.5,E4,\n1.0,2.75,C4,\n1.0,3.0,G4,\n1.0,3.25,,C3\n1.0,3.5,C5,D3\n</code></pre>"},{"location":"tools/intervals/notes/#note-representation","title":"Note Representation","text":"<ul> <li>Pitch + Octave: <code>C4</code>, <code>D5</code>, <code>B\u266d3</code></li> <li>Rest: <code>Rest</code></li> <li>No note: <code>NaN</code> (voice is silent at this moment)</li> </ul>"},{"location":"tools/intervals/notes/#octave-numbers","title":"Octave Numbers","text":"<p>Following scientific pitch notation:</p> <ul> <li><code>C4</code> = Middle C</li> <li><code>C3</code> = One octave below middle C</li> <li><code>C5</code> = One octave above middle C</li> </ul>"},{"location":"tools/intervals/notes/#use-cases","title":"Use Cases","text":""},{"location":"tools/intervals/notes/#basic-note-inventory","title":"Basic Note Inventory","text":"<p>See what notes appear in a piece:</p> <pre><code>notes = get_notes(\"Bach_BWV_0772.mei\")\nprint(notes[\"notes\"])\n</code></pre>"},{"location":"tools/intervals/notes/#voice-part-analysis","title":"Voice Part Analysis","text":"<p>Identify when each voice enters and rests:</p> <ul> <li>Look for <code>Rest</code> to find rests</li> <li>Look for <code>NaN</code> to find where voices are silent</li> </ul>"},{"location":"tools/intervals/notes/#preparation-for-interval-analysis","title":"Preparation for Interval Analysis","text":"<p>Notes extraction is typically the first step before melodic or harmonic interval analysis.</p>"},{"location":"tools/intervals/notes/#related-tools","title":"Related Tools","text":"<ul> <li>get_melodic_intervals - Calculate intervals from these notes</li> <li>get_harmonic_intervals - Compare notes between voices</li> <li>Intervals Overview - Learn about interval analysis</li> </ul>"}]}